Sprint 1)
----------------
	o Initialize the git repository for the project "Simplified Banking App"
	o Create a low-fidelity outline of the website design. Current scope is to have 3 user facing pages:
		I. The homepage/login page
		II. The user registration page - where the user will register if their information is not currently available.
		III. The account information page - a custom message to the user, based on their DB info, will be displayed. User can choose between existing accounts and see transaction history within the accounts.
	o Functionality requirements:
		HOMEPAGE/LOGIN: At this stage, styling is kept minimal. Simple HTML effects and form elements are sufficient. Accept user login information and submit to server.
			The user will be verified using txt documents on the server. If the user exists, log in. If not, send to registration page.
		REGISTRATION: 	Styling kept minimal. HTML Form and effects is sufficient. Takes user personal data, sends to server, creates txt DB entry, and then 'initializes' the customers accounts.
			Customer is then taken to their new account page. Personal data is to include name, address, phone number, and email
		ACCOUNT INFO: 	Display custom message greeting client. Display whatever accounts the customer has with the app using DB entries. Display account transactions.

-------------------
Development Notes:
-------------------
	* This is TBD. Below are general notes for improvement to the platform - these tasks have yet to be scheduled.
	---------------------------------------------------------------------------------------------------------------
	o Migrate from synchronous functionality to asynchronous functionality
	o Implement Bootstrap 5/CSS as necessary to improve the styling/appearance of the website.
	o Implement meaningful input restrictions/helpful error codes to inform a user of invalid input
	o Migrate Database functions from txt files to MongoDB or MySQL (still being researched). Consider writing server side DB code with Python.
	o Give users the ability to add an account, delete an account, make a deposit, make a withdrawal, request a loan.
	o Implement chat feature and chat robot for response
	o Improve registration page - specify required fields, enforce input, and request additional financial information from user.
	o Use user provided financial information to make a decision about opening accounts using pre-defined algorithm.
	o Separate accounts based on type (checking, savings, etc)
	o Implement handlebars.js to make templating easier
-----------------------
Implementation Details:
-----------------------

	homepage.html 		- Use a default settings html form that sends results via POST to server
	registration.html 	- 
	accountDisplay.html 	- 
	server.js 		- Receives user information from 'homepage.html' and 'registration.html'. Calls functions from FSUtilities to search, update, and read data from DB. Responds by rendering accountDisplay.html
	FSUtilitiesSync.js 	- A module with functions to manipulate .txt files, which will serve as the DB for this implementation. Make sure functions are set to specify the DB path, so I can easily change DB formats later.
	userData.txt		- contains all user data. Serves as the DB for this project. Holds data in order 'username, password, comma seperated transactions'

-----------------------
Current Tasks:
-----------------------
	o Implement FSUtilitiesSync.js - start by creating a search function that will look through the database for the user information. If exists, return user information. If does not exist, return False.
	o implement findDB(pathToDB) - confirms that pathToDB is a valid path. Confirm file exists. Throw err if else.
	o function searchDB(username, password, pathToDB) - find user info if it exists. Return user info. Return False otherwise.